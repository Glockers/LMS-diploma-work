generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id          String @id
  name        String
  lastname    String
  surname     String
  email       String
  mobilePhone String
}

model Course {
  id          String        @id @default(uuid())
  title       String
  description String?
  imageUrl    String?
  isPublished Boolean       @default(false)
  createdAt   DateTime      @default(now())
  categoryId  String?
  price       Float?
  updatedAt   DateTime      @updatedAt
  userId      String

  attachments Attachment[]
  cerfificate Certificate[]
  chapters    Chapter[]
  category    Category?     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  purchases   Purchase[]
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses   Course[]
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Chapter {
  id           String         @id @default(uuid())
  title        String
  description  String?
  videoUrl     String?
  position     Int
  isFree       Boolean        @default(false)
  isPublished  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  courseId     String

  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData      MuxData?
  userProgress UserProgress[]
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?
  chapterId  String  @unique

  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  isCompleted Boolean  @default(false)
  chapterId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Certificate {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
}

model Lections {
  id     String   @id @default(uuid())
  link   String
  date   DateTime
  userId String
}